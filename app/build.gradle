plugins {
    id "com.diffplug.gradle.spotless" version "3.16.0"
}

def rootConfiguration = {}
apply from: project(':app').file('config.gradle'), to: rootConfiguration

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'realm-android'

def YOUTUBE_API_KEY = System.getenv('YOUTUBE_API_KEY') ?: "YOUR_API_KEY"
def MAPBOX_API_KEY = '"'+System.getenv('MAPBOX_API_KEY')+'"' ?: '"DEFAULT"'

android {
    compileSdkVersion rootConfiguration.compileSdkVersion

    defaultConfig {
        applicationId "ai.susi"
        minSdkVersion rootConfiguration.minSdkVersion
        targetSdkVersion rootConfiguration.targetSdkVersion
        versionCode 14
        versionName "1.0.13"
        vectorDrawables.useSupportLibrary = true
        // for unit test
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        manifestPlaceholders = [
                YOUTUBE_API_KEY: YOUTUBE_API_KEY
        ]
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField "String", "SPEAKER_BASE_URL", '"http://10.0.0.1:5000"'
            buildConfigField "String", "MAPBOX_API_KEY", MAPBOX_API_KEY
        }

        debug {
            buildConfigField "String", "SPEAKER_BASE_URL", '"http://10.0.0.1:5000"'
            buildConfigField "String", "MAPBOX_API_KEY", MAPBOX_API_KEY
        }
    }

    flavorDimensions "default"

    productFlavors {
        fdroid {
            dimension "default"
        }

        playStore {
            dimension "default"
        }
    }

    lintOptions {
        abortOnError false
        checkReleaseBuilds false
        disable 'InvalidPackage'
    }

    testOptions {
        unitTests {
            returnDefaultValues = true
            includeAndroidResources = true
        }
    }

}

spotless {
    kotlin {
        ktlint()
        target '**/*.kt'
    }
}

repositories {
    maven { url "https://jitpack.io" }
    mavenCentral()
}

androidExtensions {
    experimental = true
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    implementation "com.android.support:appcompat-v7:${rootConfiguration.supportLibraryVersion}"
    implementation "com.android.support:exifinterface:${rootConfiguration.supportLibraryVersion}"
    implementation "com.android.support:recyclerview-v7:${rootConfiguration.supportLibraryVersion}"
    implementation "com.android.support:design:${rootConfiguration.supportLibraryVersion}"
    implementation "com.android.support:cardview-v7:${rootConfiguration.supportLibraryVersion}"
    implementation "com.android.support:support-v4:${rootConfiguration.supportLibraryVersion}"
    implementation "com.android.support:customtabs:${rootConfiguration.supportLibraryVersion}"

    //piechart
    implementation "com.github.PhilJay:MPAndroidChart:${rootConfiguration.mpAndroidChartVersion}"

    //Leak Canary
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    debugImplementation "com.squareup.leakcanary:leakcanary-android:${rootConfiguration.leakCanaryVersion}"
    releaseImplementation "com.squareup.leakcanary:leakcanary-android-no-op:${rootConfiguration.leakCanaryVersion}"
    testImplementation "com.squareup.leakcanary:leakcanary-android-no-op:${rootConfiguration.leakCanaryVersion}"

    //butterknife
    implementation "com.jakewharton:butterknife:${rootConfiguration.butterKnifeVersion}"
    kapt "com.jakewharton:butterknife-compiler:${rootConfiguration.butterKnifeVersion}"

    //For Picasso
    implementation "com.squareup.picasso:picasso:${rootConfiguration.picassoVersion}"

    //Retrofit
    implementation "com.squareup.retrofit2:retrofit:${rootConfiguration.retrofitVersion}"
    implementation "com.squareup.retrofit2:converter-gson:${rootConfiguration.retrofitVersion}"
    implementation "com.squareup.okhttp3:logging-interceptor:${rootConfiguration.okHttpVersion}"

    //For Link Previews
    implementation "org.jsoup:jsoup:${rootConfiguration.jsoupVersion}" // required
    implementation "io.github.ponnamkarthik:richlinkpreview:${rootConfiguration.linkPreviewVersion}"

    //preference UI
    implementation "com.takisoft.fix:preference-v7:${rootConfiguration.preferenceVersion}"

    //Unit Test
    testImplementation "junit:junit:${rootConfiguration.jUnitVersion}"
    testImplementation "org.mockito:mockito-core:${rootConfiguration.mockitoCoreVersion}"
    androidTestImplementation "com.android.support:support-annotations:${rootConfiguration.supportLibraryVersion}"
    androidTestImplementation "com.android.support.test:runner:${rootConfiguration.testVersion}"
    androidTestImplementation "com.android.support.test:rules:${rootConfiguration.testVersion}"
    androidTestImplementation "com.android.support.test.espresso:espresso-core:${rootConfiguration.espressoVersion}"

    //realm adapter
    implementation "io.realm:android-adapters:${rootConfiguration.realmVersion}"

    //waiting dots
    implementation "com.github.tajchert:WaitingDots:${rootConfiguration.waitingDotsVersion}"

    //Youtube API
    playStoreImplementation files('libs/YouTubeAndroidPlayerApi.jar')

    //Timber
    implementation "com.jakewharton.timber:timber:${rootConfiguration.timberVersion}"

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:${rootConfiguration.kotlinVersion}"
}
